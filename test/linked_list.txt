// see `src/StandardLibrary.cpp` for more details about LinkedListNode

function linked_list_print(node) {
    while (node != null) {
        std.print(node.value);
        node = node.get_next();

        if (node != null) {
            std.print(", ");
        }
    }

    std.println("");
}

function linked_list_size(node) {
    let result = 0;

    while (node != null) {
        result = result + 1;
        node = node.get_next();
    }

    return result;
}

function linked_list_get_node(node, index) {
    let i = 0;
    while (i < index && node != null) {
        node = node.get_next();
        i = i + 1;
    }

    return node;
}

function linked_list_get(node, index) {
    node = linked_list_get_node(node, index);

    if (node == null) {
        return null;
    }
    else {
        return node.value;
    }
}

function linked_list_set(node, index, value) {
    node = linked_list_get_node(node, index);

    if (node != null) {
        node.value = value;
    }
}

function linked_list_insert(ref node, value) {
    let new_node = std.LinkedListNode.new();
    new_node.value = value;

    if (node == null) {
        node = new_node;
        return;
    }

    let prev_node = node.get_prev();
    if (prev_node!= null) {
        prev_node.set_next(new_node);
        new_node.set_prev(prev_node);
    }

    node.set_prev(new_node);
    new_node.set_next(node);

    node = new_node;
}

function linked_list_erase(ref node) {
    if (node == null) {
        return;
    }

    let next_node = node.get_next();
    let prev_node = node.get_prev();

    if (next_node != null) {
        next_node.set_prev(prev_node);
    }
    if (prev_node != null) {
        prev_node.set_next(next_node);
    }
}

function linked_list_find(node, value, ref result_node) {
    while (node != null) {
        if (node.value == value) {
            result_node = node;
            return;
        }

        node = node.get_next();
    }

    result_node = null;
}

function set_create(ref set, bucket_count) {
    set = std.Tuple.new("element_count", "bucket_count", "buckets");
    set.element_count = 0;
    set.bucket_count = bucket_count;
    for (let i = 0; i < bucket_count; i = i + 1) {
        linked_list_insert(set.buckets, null);
    }
}

function set_rehash(ref set) {
    let new_set;
    set_create(new_set, set.bucket_count * 2);
    new_set.element_count = set.element_count;
    for (let i = 0; i < new_set.bucket_count; i = i + 1) {
        linked_list_insert(new_set.buckets, null);
    }

    let bucket = set.buckets;
    while (bucket != null) {
        let node = bucket.value;
        while (node != null) {
            let hash = std.hash(node.value, new_set.bucket_count);
            let bucket_node = linked_list_get_node(new_set.buckets, hash);
            linked_list_insert(bucket_node.value, node.value);

            node = node.get_next();
        }
        bucket = bucket.get_next();
    }

    set = new_set;
}

function set_insert(ref set, key) {
    let load_factor = set.element_count / set.bucket_count;
    if (load_factor > 0.5) {
        set_rehash(set);
    }

    let hash = std.hash(key, set.bucket_count);

    let bucket_node = linked_list_get_node(set.buckets, hash);

    let found;
    linked_list_find(bucket_node.value, key, found);

    if (found == null) {
        set.element_count = set.element_count + 1;
        linked_list_insert(bucket_node.value, key);
    }
}

function set_contains(ref set, key) {
    let hash = std.hash(key, set.bucket_count);

    let bucket_node = linked_list_get_node(set.buckets, hash);

    let found;
    linked_list_find(bucket_node.value, key, found);

    return found != null;
}

function set_erase(ref set, key) {
    let hash = std.hash(key, set.bucket_count);
    let bucket_node = linked_list_get_node(set.buckets, hash);
    
    let found;
    linked_list_find(bucket_node.value, key, found);

    if (found != null && bucket_node.value != null) {
        if (bucket_node.value.value == found.value) {
            linked_list_erase(bucket_node);
            return;
        }
    }

    linked_list_erase(found);
}

let set;
set_create(set, 10);

std.println("i - insert, f - find, e - erase, o - output, exit - stop application");
while(true) {
    std.print("> ");
    let input = std.readln();

    if (input == "exit") {
        break;
    }
    if (input == "i") {
        std.print("ins> ");
        let input = std.readln();

        set_insert(set, input);
        continue;
    }
    if (input == "f") {
        std.print("fnd> ");
        let input = std.readln();
        std.println(set_contains(set, input));

        continue;
    }
    if (input == "e") {
        std.print("ers> ");
        let input = std.readln();
        set_erase(set, input);
        continue;
    }
    if (input == "o") {
        let i = 0;
        let root = set.buckets;
        while (root != null) {
            std.print("Bucket #" + i + ": ");
            linked_list_print(root.value);

            i = i + 1;
            root = root.get_next();
        }
        continue;
    }
}
